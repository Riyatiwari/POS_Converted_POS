!function (t) { var i = function (t) { this.tipPosition = { x: 0, y: 0 }, this.init(t) }; i.prototype.init = function (i) { var e = this, o = t.plot.plugins.length; if (this.plotPlugins = [], o) for (var s = 0; s < o; s++)this.plotPlugins.push(t.plot.plugins[s].name); function n(t) { var i = {}; i.x = t.pageX, i.y = t.pageY, e.updateTooltipPosition(i) } function a(t, i, o) { var s, n = e.getDomElement(); o ? (s = e.stringFormat(e.tooltipOptions.content, o), n.html(s), e.updateTooltipPosition({ x: i.pageX, y: i.pageY }), n.css({ left: e.tipPosition.x + e.tooltipOptions.shifts.x, top: e.tipPosition.y + e.tooltipOptions.shifts.y }).show(), "function" == typeof e.tooltipOptions.onHover && e.tooltipOptions.onHover(o, n)) : n.hide().html("") } i.hooks.bindEvents.push(function (i, o) { if (e.plotOptions = i.getOptions(), !1 !== e.plotOptions.tooltip && void 0 !== e.plotOptions.tooltip) { e.tooltipOptions = e.plotOptions.tooltipOpts; e.getDomElement(); t(i.getPlaceholder()).bind("plothover", a), t(o).bind("mousemove", n) } }), i.hooks.shutdown.push(function (i, e) { t(i.getPlaceholder()).unbind("plothover", a), t(e).unbind("mousemove", n) }) }, i.prototype.getDomElement = function () { var i; return t("#flotTip").length > 0 ? i = t("#flotTip") : ((i = t("<div />").attr("id", "flotTip")).appendTo("body").hide().css({ position: "absolute" }), this.tooltipOptions.defaultTheme && i.css({ background: "#fff", "z-index": "1040", padding: "0.4em 0.6em", "border-radius": "0.5em", "font-size": "0.8em", border: "1px solid #111", display: "none", "white-space": "nowrap" })), i }, i.prototype.updateTooltipPosition = function (i) { var e = t("#flotTip").outerWidth() + this.tooltipOptions.shifts.x, o = t("#flotTip").outerHeight() + this.tooltipOptions.shifts.y; i.x - t(window).scrollLeft() > t(window).innerWidth() - e && (i.x -= e), i.y - t(window).scrollTop() > t(window).innerHeight() - o && (i.y -= o), this.tipPosition.x = i.x, this.tipPosition.y = i.y }, i.prototype.stringFormat = function (t, i) { var e, o, s = /%s/, n = /%lx/, a = /%ly/, r = /%x\.{0,1}(\d{0,})/, p = /%y\.{0,1}(\d{0,})/; if (void 0 !== i.series.threshold ? (e = i.datapoint[0], o = i.datapoint[1]) : (e = i.series.data[i.dataIndex][0], o = i.series.data[i.dataIndex][1]), null === i.series.label && i.series.originSeries && (i.series.label = i.series.originSeries.label), "function" == typeof t && (t = t(i.series.label, e, o, i)), void 0 !== i.series.percent && (t = this.adjustValPrecision(/%p\.{0,1}(\d{0,})/, t, i.series.percent)), t = void 0 !== i.series.label ? t.replace(s, i.series.label) : t.replace(s, ""), t = this.hasAxisLabel("xaxis", i) ? t.replace(n, i.series.xaxis.options.axisLabel) : t.replace(n, ""), t = this.hasAxisLabel("yaxis", i) ? t.replace(a, i.series.yaxis.options.axisLabel) : t.replace(a, ""), this.isTimeMode("xaxis", i) && this.isXDateFormat(i) && (t = t.replace(r, this.timestampToDate(e, this.tooltipOptions.xDateFormat))), this.isTimeMode("yaxis", i) && this.isYDateFormat(i) && (t = t.replace(p, this.timestampToDate(o, this.tooltipOptions.yDateFormat))), "number" == typeof e && (t = this.adjustValPrecision(r, t, e)), "number" == typeof o && (t = this.adjustValPrecision(p, t, o)), void 0 !== i.series.xaxis.ticks) { var l; l = this.hasRotatedXAxisTicks(i) ? "rotatedTicks" : "ticks"; var d = i.dataIndex + i.seriesIndex; i.series.xaxis[l].length > d && !this.isTimeMode("xaxis", i) && (t = t.replace(r, i.series.xaxis[l][d].label)) } if (void 0 !== i.series.yaxis.ticks) for (var h in i.series.yaxis.ticks) { if (i.series.yaxis.ticks.hasOwnProperty(h)) (this.isCategoriesMode("yaxis", i) ? i.series.yaxis.ticks[h].label : i.series.yaxis.ticks[h].v) === o && (t = t.replace(p, i.series.yaxis.ticks[h].label)) } return void 0 !== i.series.xaxis.tickFormatter && (t = t.replace("%x", i.series.xaxis.tickFormatter(e, i.series.xaxis).replace(/\$/g, "$$"))), void 0 !== i.series.yaxis.tickFormatter && (t = t.replace("%y", i.series.yaxis.tickFormatter(o, i.series.yaxis).replace(/\$/g, "$$"))), t }, i.prototype.isTimeMode = function (t, i) { return void 0 !== i.series[t].options.mode && "time" === i.series[t].options.mode }, i.prototype.isXDateFormat = function (t) { return void 0 !== this.tooltipOptions.xDateFormat && null !== this.tooltipOptions.xDateFormat }, i.prototype.isYDateFormat = function (t) { return void 0 !== this.tooltipOptions.yDateFormat && null !== this.tooltipOptions.yDateFormat }, i.prototype.isCategoriesMode = function (t, i) { return void 0 !== i.series[t].options.mode && "categories" === i.series[t].options.mode }, i.prototype.timestampToDate = function (i, e) { var o = new Date(1 * i); return t.plot.formatDate(o, e, this.tooltipOptions.monthNames, this.tooltipOptions.dayNames) }, i.prototype.adjustValPrecision = function (t, i, e) { var o; return null !== i.match(t) && "" !== RegExp.$1 && (o = RegExp.$1, e = e.toFixed(o), i = i.replace(t, e)), i }, i.prototype.hasAxisLabel = function (t, i) { return -1 !== this.plotPlugins.indexOf("axisLabels") && void 0 !== i.series[t].options.axisLabel && i.series[t].options.axisLabel.length > 0 }, i.prototype.hasRotatedXAxisTicks = function (i) { return 1 === t.grep(t.plot.plugins, function (t) { return "tickRotor" === t.name }).length && "undefined" !== i.series.xaxis.rotatedTicks }; t.plot.plugins.push({ init: function (t) { new i(t) }, options: { tooltip: !1, tooltipOpts: { content: "%s | X: %x | Y: %y", xDateFormat: null, yDateFormat: null, monthNames: null, dayNames: null, shifts: { x: 10, y: 20 }, defaultTheme: !0, onHover: function (t, i) { } } }, name: "tooltip", version: "0.6.7" }) }(jQuery);